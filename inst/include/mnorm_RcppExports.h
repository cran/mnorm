// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_mnorm_RCPPEXPORTS_H_GEN_
#define RCPP_mnorm_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace mnorm {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("mnorm", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("mnorm", "_mnorm_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in mnorm");
            }
        }
    }

    inline List cmnorm(const NumericVector mean, const NumericMatrix sigma, const NumericVector given_ind, const NumericVector given_x, NumericVector dependent_ind = NumericVector(), const bool is_validation = true, const bool is_names = true, Nullable<List> control = R_NilValue, const int n_cores = 1) {
        typedef SEXP(*Ptr_cmnorm)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cmnorm p_cmnorm = NULL;
        if (p_cmnorm == NULL) {
            validateSignature("List(*cmnorm)(const NumericVector,const NumericMatrix,const NumericVector,const NumericVector,NumericVector,const bool,const bool,Nullable<List>,const int)");
            p_cmnorm = (Ptr_cmnorm)R_GetCCallable("mnorm", "_mnorm_cmnorm");
        }
        RObject rcpp_result_gen;
        {
            rcpp_result_gen = p_cmnorm(Shield<SEXP>(Rcpp::wrap(mean)), Shield<SEXP>(Rcpp::wrap(sigma)), Shield<SEXP>(Rcpp::wrap(given_ind)), Shield<SEXP>(Rcpp::wrap(given_x)), Shield<SEXP>(Rcpp::wrap(dependent_ind)), Shield<SEXP>(Rcpp::wrap(is_validation)), Shield<SEXP>(Rcpp::wrap(is_names)), Shield<SEXP>(Rcpp::wrap(control)), Shield<SEXP>(Rcpp::wrap(n_cores)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List dmnorm(const NumericVector x, const NumericVector mean, const NumericMatrix sigma, const NumericVector given_ind = NumericVector(), const bool log = false, const bool grad_x = false, const bool grad_sigma = false, const bool is_validation = true, Nullable<List> control = R_NilValue, const int n_cores = 1) {
        typedef SEXP(*Ptr_dmnorm)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_dmnorm p_dmnorm = NULL;
        if (p_dmnorm == NULL) {
            validateSignature("List(*dmnorm)(const NumericVector,const NumericVector,const NumericMatrix,const NumericVector,const bool,const bool,const bool,const bool,Nullable<List>,const int)");
            p_dmnorm = (Ptr_dmnorm)R_GetCCallable("mnorm", "_mnorm_dmnorm");
        }
        RObject rcpp_result_gen;
        {
            rcpp_result_gen = p_dmnorm(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(mean)), Shield<SEXP>(Rcpp::wrap(sigma)), Shield<SEXP>(Rcpp::wrap(given_ind)), Shield<SEXP>(Rcpp::wrap(log)), Shield<SEXP>(Rcpp::wrap(grad_x)), Shield<SEXP>(Rcpp::wrap(grad_sigma)), Shield<SEXP>(Rcpp::wrap(is_validation)), Shield<SEXP>(Rcpp::wrap(control)), Shield<SEXP>(Rcpp::wrap(n_cores)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline NumericMatrix halton(const int n = 1, const IntegerVector base = IntegerVector::create(2), const int start = 1, const String random = "NO", const String type = "halton", const bool is_validation = true, const int n_cores = 1) {
        typedef SEXP(*Ptr_halton)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_halton p_halton = NULL;
        if (p_halton == NULL) {
            validateSignature("NumericMatrix(*halton)(const int,const IntegerVector,const int,const String,const String,const bool,const int)");
            p_halton = (Ptr_halton)R_GetCCallable("mnorm", "_mnorm_halton");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_halton(Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(base)), Shield<SEXP>(Rcpp::wrap(start)), Shield<SEXP>(Rcpp::wrap(random)), Shield<SEXP>(Rcpp::wrap(type)), Shield<SEXP>(Rcpp::wrap(is_validation)), Shield<SEXP>(Rcpp::wrap(n_cores)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

    inline double haltonSingleDraw(int ind = 1, int base = 2) {
        typedef SEXP(*Ptr_haltonSingleDraw)(SEXP,SEXP);
        static Ptr_haltonSingleDraw p_haltonSingleDraw = NULL;
        if (p_haltonSingleDraw == NULL) {
            validateSignature("double(*haltonSingleDraw)(int,int)");
            p_haltonSingleDraw = (Ptr_haltonSingleDraw)R_GetCCallable("mnorm", "_mnorm_haltonSingleDraw");
        }
        RObject rcpp_result_gen;
        {
            rcpp_result_gen = p_haltonSingleDraw(Shield<SEXP>(Rcpp::wrap(ind)), Shield<SEXP>(Rcpp::wrap(base)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline IntegerVector seqPrimes(const int n) {
        typedef SEXP(*Ptr_seqPrimes)(SEXP);
        static Ptr_seqPrimes p_seqPrimes = NULL;
        if (p_seqPrimes == NULL) {
            validateSignature("IntegerVector(*seqPrimes)(const int)");
            p_seqPrimes = (Ptr_seqPrimes)R_GetCCallable("mnorm", "_mnorm_seqPrimes");
        }
        RObject rcpp_result_gen;
        {
            rcpp_result_gen = p_seqPrimes(Shield<SEXP>(Rcpp::wrap(n)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline List pmnorm(const NumericVector lower, const NumericVector upper, const NumericVector given_x = NumericVector(), const NumericVector mean = NumericVector(), const NumericMatrix sigma = NumericMatrix(), const NumericVector given_ind = NumericVector(), const int n_sim = 1000, const String method = "default", const String ordering = "mean", const bool log = false, const bool grad_lower = false, const bool grad_upper = false, const bool grad_sigma = false, const bool grad_given = false, const bool is_validation = true, Nullable<List> control = R_NilValue, const int n_cores = 1) {
        typedef SEXP(*Ptr_pmnorm)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_pmnorm p_pmnorm = NULL;
        if (p_pmnorm == NULL) {
            validateSignature("List(*pmnorm)(const NumericVector,const NumericVector,const NumericVector,const NumericVector,const NumericMatrix,const NumericVector,const int,const String,const String,const bool,const bool,const bool,const bool,const bool,const bool,Nullable<List>,const int)");
            p_pmnorm = (Ptr_pmnorm)R_GetCCallable("mnorm", "_mnorm_pmnorm");
        }
        RObject rcpp_result_gen;
        {
            rcpp_result_gen = p_pmnorm(Shield<SEXP>(Rcpp::wrap(lower)), Shield<SEXP>(Rcpp::wrap(upper)), Shield<SEXP>(Rcpp::wrap(given_x)), Shield<SEXP>(Rcpp::wrap(mean)), Shield<SEXP>(Rcpp::wrap(sigma)), Shield<SEXP>(Rcpp::wrap(given_ind)), Shield<SEXP>(Rcpp::wrap(n_sim)), Shield<SEXP>(Rcpp::wrap(method)), Shield<SEXP>(Rcpp::wrap(ordering)), Shield<SEXP>(Rcpp::wrap(log)), Shield<SEXP>(Rcpp::wrap(grad_lower)), Shield<SEXP>(Rcpp::wrap(grad_upper)), Shield<SEXP>(Rcpp::wrap(grad_sigma)), Shield<SEXP>(Rcpp::wrap(grad_given)), Shield<SEXP>(Rcpp::wrap(is_validation)), Shield<SEXP>(Rcpp::wrap(control)), Shield<SEXP>(Rcpp::wrap(n_cores)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline arma::vec pmnorm2(const arma::vec x1, const arma::vec x2, const arma::vec x, const arma::vec adj, const arma::vec adj1, const arma::vec adj2, const int n_cores = 1) {
        typedef SEXP(*Ptr_pmnorm2)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_pmnorm2 p_pmnorm2 = NULL;
        if (p_pmnorm2 == NULL) {
            validateSignature("arma::vec(*pmnorm2)(const arma::vec,const arma::vec,const arma::vec,const arma::vec,const arma::vec,const arma::vec,const int)");
            p_pmnorm2 = (Ptr_pmnorm2)R_GetCCallable("mnorm", "_mnorm_pmnorm2");
        }
        RObject rcpp_result_gen;
        {
            rcpp_result_gen = p_pmnorm2(Shield<SEXP>(Rcpp::wrap(x1)), Shield<SEXP>(Rcpp::wrap(x2)), Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(adj)), Shield<SEXP>(Rcpp::wrap(adj1)), Shield<SEXP>(Rcpp::wrap(adj2)), Shield<SEXP>(Rcpp::wrap(n_cores)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline double GHK(const NumericVector lower, const NumericVector upper, const NumericMatrix sigma, const arma::mat h, const String ordering = "default", const int n_sim = 1000, const int n_cores = 1) {
        typedef SEXP(*Ptr_GHK)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_GHK p_GHK = NULL;
        if (p_GHK == NULL) {
            validateSignature("double(*GHK)(const NumericVector,const NumericVector,const NumericMatrix,const arma::mat,const String,const int,const int)");
            p_GHK = (Ptr_GHK)R_GetCCallable("mnorm", "_mnorm_GHK");
        }
        RObject rcpp_result_gen;
        {
            rcpp_result_gen = p_GHK(Shield<SEXP>(Rcpp::wrap(lower)), Shield<SEXP>(Rcpp::wrap(upper)), Shield<SEXP>(Rcpp::wrap(sigma)), Shield<SEXP>(Rcpp::wrap(h)), Shield<SEXP>(Rcpp::wrap(ordering)), Shield<SEXP>(Rcpp::wrap(n_sim)), Shield<SEXP>(Rcpp::wrap(n_cores)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline arma::vec qnormFast(arma::vec const& p, const int mean = 0, const int sd = 1, String method = "Voutier", bool is_validation = true, const int n_cores = 1) {
        typedef SEXP(*Ptr_qnormFast)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_qnormFast p_qnormFast = NULL;
        if (p_qnormFast == NULL) {
            validateSignature("arma::vec(*qnormFast)(arma::vec const&,const int,const int,String,bool,const int)");
            p_qnormFast = (Ptr_qnormFast)R_GetCCallable("mnorm", "_mnorm_qnormFast");
        }
        RObject rcpp_result_gen;
        {
            rcpp_result_gen = p_qnormFast(Shield<SEXP>(Rcpp::wrap(p)), Shield<SEXP>(Rcpp::wrap(mean)), Shield<SEXP>(Rcpp::wrap(sd)), Shield<SEXP>(Rcpp::wrap(method)), Shield<SEXP>(Rcpp::wrap(is_validation)), Shield<SEXP>(Rcpp::wrap(n_cores)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

}

#endif // RCPP_mnorm_RCPPEXPORTS_H_GEN_
